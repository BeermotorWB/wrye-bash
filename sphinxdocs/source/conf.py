# -*- coding: utf-8 -*-
#
# Wrye Bash documentation build configuration file, created by
# sphinx-quickstart on Fri Feb 05 13:04:51 2016.
#
# This file is execfile()d with the current directory set to its
# containing dir.
#
# Note that not all possible configuration values are present in this
# autogenerated file.
#
# All configuration values have a default; values that are commented out
# serve to show the default.

"""
Description
===========
Sphinx configuration file for the Wrye Bash API Docs and whatever else.

Note that not all possible configuration values are present in this
autogenerated file... But Metallicow has pasted quite a few more in and
has copied from the sphinx docs to be more complete and helpful.

:seealso: http://www.sphinx-doc.org/en/stable/config.html

"""

import sys
import os

# If extensions (or modules to document with autodoc) are in another directory,
# add these directories to sys.path here. If the directory is relative to the
# documentation root, use os.path.abspath to make it absolute, like shown here.
mopyDir = os.path.abspath('../../Mopy')
print('mopyDir = %s' % mopyDir)
assert os.path.exists(mopyDir)  # Sanity check.
assert os.path.basename(mopyDir) == 'Mopy'  # Sanity check.
sys.path.insert(0, os.path.abspath('.'))
sys.path.insert(0, os.path.join(mopyDir, 'bash'))
sys.path.insert(0, mopyDir)

if sys.version_info[0] == 2:
    import __builtin__ as builtins
else:
    import builtins
builtins.SPHINX_BUILDINGDOCS = True
"""add SPHINX_BUILDINGDOCS to builtins as simple way to place checks in the
 actual code base if necessary to hack/help with build errors. and other formatting issues.

 Example usage:

    try:
        if SPHINX_BUILDINGDOCS:
            pass  # handle a build error in the code base somehow or do something...
    except NameError:
        # ... lines of code ... that would normally be there, that is causing build errors.

 :seealso: autodoc_mock_imports"""

import sphinx
print('Sphinx %s.%s.%s.%s.%s' % sphinx.version_info)


# One line description of project.
oneline_project_desc = 'Mod management utility for Oblivion and Skyrim'

# -- Project information --------------------------------------------------
# General information about the project.
project = u'Wrye Bash'
copyright = u'2016, Wrye Bash Team'
author = u'Wrye Bash Team'

# The version info for the project you're documenting, acts as replacement for
# |version| and |release|, also used in various other places throughout the
# built documents.
#
# The short X.Y version.
version = u'dev'
# The full version, including alpha/beta/rc tags.
release = u'dev'

# There are two options for replacing |today|: either, you set today to some
# non-false value, then it is used:
##today = ''
# Else, today_fmt is used as the format for a strftime call.
today_fmt = '%B %d, %Y'

# If true, '()' will be appended to :func: etc. cross-reference text.
add_function_parentheses = True

# If true, the current module name will be prepended to all description
# unit titles (such as .. function::).
add_module_names = False

# If true, sectionauthor and moduleauthor directives will be shown in the
# output. They are ignored by default.
show_authors = False

# The name of the Pygments (syntax highlighting) style to use.
pygments_style = 'sphinx'

# The default language to highlight source code in. The default is 'python'.
# The value should be a valid Pygments lexer name, see Showing code examples for more details.
highlight_language = 'python'

# -- General configuration ------------------------------------------------

# If your documentation needs a minimal Sphinx version, state it here.
##needs_sphinx = '1.0'

# This value can be a dictionary specifying version requirements for extensions
# in extensions, e.g. needs_extensions = {'sphinxcontrib.something': '1.5'}.
# The version strings should be in the form major.minor. Requirements do not
# have to be specified for all extensions, only for those you want to check.
# This requires that the extension specifies its version to Sphinx
# (see Developing extensions for Sphinx for how to do that).
needs_extensions = {}

# Add any Sphinx extension module names here, as strings. They can be
# extensions coming with Sphinx (named 'sphinx.ext.*') or your custom
# ones.
extensions = [
    'sphinx.ext.todo',          # http://sphinx-doc.org/ext/todo.html
    'sphinx.ext.autodoc',       # http://sphinx-doc.org/ext/autodoc.html
    'sphinx.ext.autosummary',   # http://sphinx-doc.org/ext/autosummary.html
    'sphinx.ext.coverage',      # http://sphinx-doc.org/ext/coverage.html
    'sphinx.ext.doctest',       # http://sphinx-doc.org/ext/doctest.html
    ## 'sphinx.ext.intersphinx',   # http://sphinx-doc.org/ext/intersphinx.html
    ## 'sphinx.ext.pngmath',       # http://sphinx-doc.org/ext/math.html#module-sphinx.ext.pngmath
    ## 'sphinx.ext.mathjax',       # http://sphinx-doc.org/ext/math.html#module-sphinx.ext.mathjax
    ## 'sphinx.ext.jsmath',        # http://sphinx-doc.org/ext/math.html#module-sphinx.ext.jsmath
    ## 'sphinx.ext.ifconfig',      # http://sphinx-doc.org/ext/ifconfig.html
    ## 'sphinx.ext.extlinks',      # http://sphinx-doc.org/ext/extlinks.html
    'sphinx.ext.viewcode',      # http://sphinx-doc.org/ext/viewcode.html
    ## 'sphinx.ext.linkcode',      # http://sphinx-doc.org/ext/linkcode.html
    ## 'sphinx.ext.napoleon',      # http://sphinx-doc.org/ext/napoleon.html

    ## 'sphinx.ext.inheritance_diagram',  # http://sphinx-doc.org/ext/inheritance.html
    ## 'sphinx.ext.graphviz',      # http://sphinx-doc.org/ext/graphviz.html

    ## 'sphinx.ext.oldcmarkup',    # http://sphinx-doc.org/ext/oldcmarkup.html
]


# Add any paths that contain templates here, relative to this directory.
templates_path = ['_templates']

# The suffix(es) of source filenames.
# You can specify multiple suffix as a list of string:
# source_suffix = ['.rst', '.md']
source_suffix = ['.rst']

# The encoding of source files.
source_encoding = 'utf-8-sig'

# If given, a dictionary of parser classes for different source suffices.
# The keys are the suffix, the values can be either a class or a string giving
# a fully-qualified name of a parser class.
# Files with a suffix that is not in the dictionary will be parsed with
# the default reStructuredText parser.
##source_parsers = {'.md': 'some.markdown.module.Parser'}

# The master toctree document.
master_doc = 'index'

# List of patterns, relative to source directory, that match files and
# directories to ignore when looking for source files.
exclude_patterns = [
    '_build',
    '_dontscan'
    ]

# The reST default role (used for this markup: `text`) to use for all
# documents.
default_role = None

# A list of ignored prefixes for module index sorting.
modindex_common_prefix = []

# If true, keep warnings as "system message" paragraphs in the built documents.
# Default is False
keep_warnings = True

# A string of reStructuredText that will be included at the end of every source file that is read.
# This is the right place to add substitutions that should be available in every file.
# An example:
# rst_epilog = """
# .. |psf| replace:: Python Software Foundation
# """
rst_epilog = """"""

# A string of reStructuredText that will be included at the beginning of
# every source file that is read.
rst_prolog = """"""

# -- Options for internationalization -------------------------------------
# The language for content autogenerated by Sphinx. Refer to documentation
# for a list of supported languages.
#
# This is also used if you do content translation via gettext catalogs.
# Usually you set "language" from the command line for these cases.
language = None

# Directories in which to search for additional message catalogs (see language),
# relative to the source directory. The directories on this path are searched
# by the standard gettext module.
#
# Internal messages are fetched from a text domain of sphinx; so if you add
# the directory ./locale to this setting, the message catalogs (compiled
# from .po format using msgfmt) must be in ./locale/language/LC_MESSAGES/sphinx.mo.
# The text domain of individual documents depends on gettext_compact.
# The default is [].
locale_dirs = []

# -- gettext options --
# If true, a document's text domain is its docname if it is a top-level
# project file and its very base directory otherwise.
# By default, the document markup/code.rst ends up in the markup text domain.
# With this option set to False, it is markup/code.
gettext_compact = True

# If true, Sphinx generates location information for messages in message catalogs.
# The default is True.
gettext_location = True

# If true, Sphinx generates uuid information for version tracking in message catalogs.
# It is used for:
#
#     Add uid line for each msgids in .pot files.
#     Calculate similarity between new msgids and previously saved old msgids.
#      This calculation takes a long time.
#
# If you want to accelerate the calculation, you can use python-levenshtein
# 3rd-party package written in C by using pip install python-levenshtein.
# The default is False.
gettext_uuid = False

# If true, Sphinx builds mo file for each translation catalog files.
# The default is True.
gettext_auto_build = True

# To specify names to enable gettext extracting and translation applying for i18n additionally. You can specify below names:
# Index:            index terms
# Literal-block:    literal blocks: :: and code-block.
# Doctest-block:    doctest block
# Raw:              raw content
# Image:            image/figure uri and alt
#
# For example: gettext_additional_targets = ['literal-block', 'image'].
#
# The default is [].
gettext_additional_targets = []

# -- Options for sphinx.ext.todo extension --------------------------------
# If true, `todo` and `todoList` produce output, else they produce nothing.
todo_include_todos = True

# -- Options for sphinx.ext.doctest extension -----------------------------
# A list of directories that will be added to sys.path when the
# doctest builder is used. (Make sure it contains absolute paths.)
doctest_path = []

# Python code that is treated like it were put in a testsetup directive for
# every file that is tested, and for every group.
# You can use this to e.g. import modules you will always need in your doctests.
doctest_global_setup = """"""

# Python code that is treated like it were put in a testcleanup directive for every file that is tested, and for every group. You can use this to e.g. remove any temporary files that the tests leave behind.
doctest_global_cleanup = """"""

# If this is a nonempty string (the default is 'default'),
# standard reST doctest blocks will be tested too.
# They will be assigned to the group name given.
doctest_test_doctest_blocks = 'default'


# -- Options for sphinx.ext.coverage extension ----------------------------
coverage_ignore_modules = []
coverage_ignore_functions = []
coverage_ignore_classes = []
coverage_c_path = []
coverage_c_regexes = {}
coverage_ignore_c_items = {}
coverage_write_headline = True
coverage_skip_undoc_in_source = False

# -- Options for sphinx.ext.autodoc extension -----------------------------
# This value selects what content will be inserted into the main body of an autoclass directive.
# "class"
#     Only the class' docstring is inserted. This is the default.
#     You can still document __init__ as a separate method using automethod or the members option to autoclass.
# "both"
#     Both the class' and the __init__ method's docstring are concatenated and inserted.
# "init"
#     Only the __init__ method's docstring is inserted.
autoclass_content = 'class'
## autoclass_content = 'both'
## autoclass_content = 'init'

# This value selects if automatically documented members
# are sorted alphabetical (value 'alphabetical'),
# by member type (value 'groupwise') or
# by source order (value 'bysource'). The default is alphabetical.
# Note that for source order, the module must be a Python module with the source code available.
autodoc_member_order = 'bysource'

# This value is a list of autodoc directive flags that should be automatically
# applied to all autodoc directives.
# The supported flags are 'members', 'undoc-members', 'private-members',
#                         'special-members', 'inherited-members' and 'show-inheritance'.
# If you set one of these flags in this config value, you can use a negated form,
# 'no-flag', in an autodoc directive, to disable it once.
# For example, if autodoc_default_flags is set to ['members', 'undoc-members'],
# and you write a directive like this:
#
# .. automodule:: foo
#    :no-undoc-members:
#
# the directive will be interpreted as if only :members: was given.
## autodoc_default_flags = []
autodoc_default_flags = [
    'members',
    'undoc-members',
    'private-members',
    'special-members',
    'show-inheritance',
    # 'inherited-members',
    'no-inherited-members',
    ## 'member-order',
    ## 'platform',
    ## 'synopsis',
    ## ':deprecated:',
    ## :exclude-members: __module__, __dict__, __weakref__, staticMetaObject
    ]

# Functions imported from C modules cannot be introspected, and therefore the
# signature for such functions cannot be automatically determined.
# However, it is an often-used convention to put the signature into the first line of the function's docstring.
#
# If this boolean value is set to True (which is the default), autodoc will look at
# the first line of the docstring for functions and methods, and if it looks like
# a signature, use the line as the signature and remove it from the docstring content.
autodoc_docstring_signature = True

# This value contains a list of modules to be mocked up.
# This is useful when some external dependencies are not met at build time
# and break the building process.
autodoc_mock_imports = []

# -- Options for Text output ----------------------------------------------
# Determines which end-of-line character(s) are used in text output.
#     'unix': use Unix-style line endings (\n)
#     'windows': use Windows-style line endings (\r\n)
#     'native': use the line ending style of the platform the documentation is built on
# Default: 'unix'.
text_newlines = 'unix'

# A string of 7 characters that should be used for underlining sections.
# The first character is used for first-level headings,
# the second for second-level headings and so on.
# The default is '*=-~"+`'.
text_sectionchars = '*=-~"+`'

# -- Options for HTML output ----------------------------------------------

# The theme to use for HTML and HTML Help pages.  See the documentation for
# a list of builtin themes.
# html_theme = 'basic'
# html_theme = 'alabaster'
html_theme = 'sphinx_rtd_theme'
# html_theme = 'classic'
# html_theme = 'default'
# html_theme = 'sphinxdoc'
# html_theme = 'agogo'
# html_theme = 'epub'
# html_theme = 'haiku'
# html_theme = 'nature'
# html_theme = 'pyramid'
# html_theme = 'scrolls'
# html_theme = 'traditional'
# html_theme = 'bizstyle'

# Theme options are theme-specific and customize the look and feel of a theme
# further.  For a list of options available for each theme, see the
# documentation. http://www.sphinx-doc.org/en/stable/theming.html
if html_theme == 'basic':
    html_theme_options = {
        'nosidebar': False,     # Don't include the sidebar. Defaults to False.
        'sidebarwidth': 230,    # (an integer): Width of the sidebar in pixels. (Do not include px in the value.) Defaults to 230 pixels.
        }
elif html_theme in ('default', 'alabaster'):
    html_theme_options = {
        'logo': os.path.join(mopyDir, 'bash', 'images', 'bash_32.png'),
        'logo_name': True,   # Set to true to insert your site's project name under the logo image as text. Useful if your logo doesn't include the project name itself. Defaults to false.
        # 'logo_text_align': 'left',  # Which CSS text-align value to use for logo text (if there is any.)
        # 'body_text_align': 'left',  # Which CSS text-align value to use for body text (if there is any.)
        'description': oneline_project_desc,
        'description_font_style': 'normal',
        'github_user': 'wrye-bash',
        'github_repo': 'wrye-bash',
        'github_button': True,
        'github_banner': False,
        'github_type': 'watch',
        'github_count': True,
        'travis_button': False,
        'codecov_button': False,
        'gratipay_user': False,
        # 'analytics_id': '',
        # 'gittip_user': '',
        'touch_icon': os.path.join(mopyDir, 'bash', 'images', 'bash_32.png'),
        # 'extra_nav_links': {},
        'sidebar_includehidden': True,
        'show_powered_by': True,
        'show_related': False,
        'page_width': '940px',
        'sidebar_width': '220px',
        }
elif html_theme == 'sphinx_rtd_theme':
    html_theme_options = {
        'typekit_id': 'hiw1hhg',
        'analytics_id': '',
        'sticky_navigation': False,  # Set to False to disable the sticky nav while scrolling.
        'logo_only': False,  # if we have a html_logo below, this shows /only/ the logo with no title text
        'collapse_navigation': False,
        'display_version': True,
        }
elif html_theme == 'sphinxdoc':
    html_theme_options = {
        'nosidebar': False,     # Don't include the sidebar. Defaults to False.
        'sidebarwidth': 230,    # (an integer): Width of the sidebar in pixels. (Do not include px in the value.) Defaults to 230 pixels.
        }
elif html_theme == 'nature':
    html_theme_options = {
        'nosidebar': False,     # Don't include the sidebar. Defaults to False.
        'sidebarwidth': 230,    # (an integer): Width of the sidebar in pixels. (Do not include px in the value.) Defaults to 230 pixels.
        }
elif html_theme == 'pyramid':
    html_theme_options = {
        'nosidebar': False,     # Don't include the sidebar. Defaults to False.
        'sidebarwidth': 230,    # (an integer): Width of the sidebar in pixels. (Do not include px in the value.) Defaults to 230 pixels.
        }
elif html_theme == 'traditional':
    html_theme_options = {
        'nosidebar': False,     # Don't include the sidebar. Defaults to False.
        'sidebarwidth': 230,    # (an integer): Width of the sidebar in pixels. (Do not include px in the value.) Defaults to 230 pixels.
        }
elif html_theme == 'agogo':
    html_theme_options = {
        'bodyfont': '"Verdana", Arial, sans-serif',
        'headerfont': '"Georgia", "Times New Roman", serif',
        'pagewidth': '70em',
        'documentwidth': '50em',
        'sidebarwidth': '20em',
        'bgcolor': '#eeeeec',
        'headerbg': '#555573 url(bgtop.png) top left repeat-x',
        'footerbg': 'url(bgfooter.png) top left repeat-x',
        'linkcolor': '#ce5c00',
        'headercolor1': '#204a87',
        'headercolor2': '#3465a4',
        'headerlinkcolor': '#fcaf3e',
        'textalign': 'justify',
        }
elif html_theme == 'classic':
    html_theme_options = {
        'rightsidebar': False,  # Put the sidebar on the right side. Defaults to False.
        'stickysidebar': False,  # Make the sidebar "fixed" so that it doesn't scroll out of view for long body content. This may not work well with all browsers. Defaults to False.
        'collapsiblesidebar': False,  # Add an experimental JavaScript snippet that makes the sidebar collapsible via a button on its side. Doesn’t work with "stickysidebar". Defaults to False.
        'externalrefs': False,  # Display external links differently from internal links. Defaults to False.
        }
elif html_theme == 'scrolls':
    html_theme_options = {
        'headerbordercolor': '#1752b4',
        'subheadlinecolor': '#0d306b',
        'linkcolor': '#1752b4',
        'visitedlinkcolor': '#444',
        'admonitioncolor': '#28437f',
        }
elif html_theme == 'haiku':
    html_theme_options = {
        'full_logo': False,
        'textcolor': '#333333',
        'headingcolor': '#0c3762',
        'linkcolor': '#dc3c01',
        'visitedlinkcolor': '#892601',
        'hoverlinkcolor': '#ff4500',
        }
elif html_theme == 'epub':
    html_theme_options = {
        'relbar1': True,
        'footer': True,
        }
elif html_theme == 'bizstyle':
    html_theme_options = {
        'rightsidebar': False,
        'maincolor': '#336699',
        }
else:  # Probably a user custom theme.
    html_theme_options = {}


# Add any paths that contain custom themes here, relative to this directory.
html_theme_path = []

# The name for this set of Sphinx documents.  If None, it defaults to
# "<project> v<release> documentation".
html_title = None

# A shorter title for the navigation bar.  Default is the same as html_title.
##html_short_title = None

# The name of an image file (relative to this directory) to place at the top
# of the sidebar.
#html_logo = None
html_logo = os.path.join(mopyDir, 'bash', 'images', 'bash_32.png')

# The name of an image file (within the static path) to use as favicon of the
# docs.  This file should be a Windows icon file (.ico) being 16x16 or 32x32
# pixels large.
html_favicon = os.path.join(mopyDir, 'bash', 'images', 'bash_32.ico')

# Add any paths that contain custom static files (such as style sheets) here,
# relative to this directory. They are copied after the builtin static files,
# so a file named "default.css" will overwrite the builtin "default.css".
html_static_path = ['_static']

# Add any extra paths that contain custom files (such as robots.txt or
# .htaccess) here, relative to this directory. These files are copied
# directly to the root of the documentation.
html_extra_path = []

# If not '', a 'Last updated on:' timestamp is inserted at every page bottom,
# using the given strftime format.
html_last_updated_fmt = '%b %d, %Y'

# If true, SmartyPants will be used to convert quotes and dashes to
# typographically correct entities.
html_use_smartypants = True

# Custom sidebar templates, maps document names to template names.
#html_sidebars = {}

# Additional templates that should be rendered to pages, maps page names to
# template names.
#html_additional_pages = {}

# If false, no module index is generated.
#html_domain_indices = True

# If false, no index is generated.
#html_use_index = True

# If true, the index is split into individual pages for each letter.
#html_split_index = False

# If true, links to the reST sources are added to the pages.
#html_show_sourcelink = True

# If true, "Created using Sphinx" is shown in the HTML footer. Default is True.
html_show_sphinx = True

# If true, "(C) Copyright ..." is shown in the HTML footer. Default is True.
html_show_copyright = True

# If true, an OpenSearch description file will be output, and all pages will
# contain a <link> tag referring to it.  The value of this option must be the
# base URL from which the finished HTML is served.
#html_use_opensearch = ''

# This is the file name suffix for HTML files (e.g. ".xhtml").
#html_file_suffix = None

# Language to be used for generating the HTML full-text search index.
# Sphinx supports the following languages:
#   'da', 'de', 'en', 'es', 'fi', 'fr', 'hu', 'it', 'ja'
#   'nl', 'no', 'pt', 'ro', 'ru', 'sv', 'tr'
#html_search_language = 'en'

# A dictionary with options for the search language support, empty by default.
# Now only 'ja' uses this config value
#html_search_options = {'type': 'default'}

# The name of a javascript file (relative to the configuration directory) that
# implements a search results scorer. If empty, the default will be used.
#html_search_scorer = 'scorer.js'

# Output file base name for HTML help builder.
htmlhelp_basename = 'WryeBashdoc'

# -- Options for LaTeX output ---------------------------------------------

latex_elements = {
# The paper size ('letterpaper' or 'a4paper').
#'papersize': 'letterpaper',

# The font size ('10pt', '11pt' or '12pt').
#'pointsize': '10pt',

# Additional stuff for the LaTeX preamble.
#'preamble': '',

# Latex figure (float) alignment
#'figure_align': 'htbp',
}

# Grouping the document tree into LaTeX files. List of tuples
# (source start file, target name, title,
#  author, documentclass [howto, manual, or own class]).
latex_documents = [
    (master_doc, 'WryeBash.tex', u'Wrye Bash Documentation',
     u'Wrye Bash Team', 'manual'),
]

# The name of an image file (relative to this directory) to place at the top of
# the title page.
#latex_logo = None

# For "manual" documents, if this is true, then toplevel headings are parts,
# not chapters.
#latex_use_parts = False

# If true, show page references after internal links.
#latex_show_pagerefs = False

# If true, show URL addresses after external links.
#latex_show_urls = False

# Documents to append as an appendix to all manuals.
#latex_appendices = []

# If false, no module index is generated.
#latex_domain_indices = True


# -- Options for manual page output ---------------------------------------

# One entry per manual page. List of tuples
# (source start file, name, description, authors, manual section).
man_pages = [
    (master_doc, 'wryebash', u'Wrye Bash Documentation',
     [author], 1)
]

# If true, show URL addresses after external links. Default is False.
man_show_urls = False


# -- Options for Texinfo output -------------------------------------------

# Grouping the document tree into Texinfo files. List of tuples
# (source start file, target name, title, author,
#  dir menu entry, description, category)
texinfo_documents = [
    (master_doc, 'WryeBash', u'Wrye Bash Documentation',
     author, 'WryeBash', oneline_project_desc,
     'Miscellaneous'),
]

# Documents to append as an appendix to all manuals.
#texinfo_appendices = []

# If false, no module index is generated.
#texinfo_domain_indices = True

# How to display URL addresses: 'footnote', 'no', or 'inline'.
#texinfo_show_urls = 'footnote'

# If true, do not generate a @detailmenu in the "Top" node's menu.
#texinfo_no_detailmenu = False


# Example configuration for intersphinx: refer to the Python standard library.
intersphinx_mapping = {'https://docs.python.org/': None}
